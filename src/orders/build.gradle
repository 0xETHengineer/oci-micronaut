plugins {
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id("io.micronaut.application") version "2.0.6"
}

group = "micronaut.mushop"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("mushop.orders.*")
    }
}

dependencies {
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.micrometer:micronaut-micrometer-annotation")
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")

    // Kubernetes service discovery
    implementation("io.micronaut.kubernetes:micronaut-kubernetes-discovery-client")

    // AWS - Configuration discovery
    implementation("io.micronaut.aws:micronaut-aws-secretsmanager")
    implementation("io.micronaut.aws:micronaut-aws-parameter-store")

    // AWS - authentication
    implementation("software.amazon.awssdk:sts")

    // Swagger
    implementation("io.swagger.core.v3:swagger-annotations")

    // Metrics - Core
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")

    // Metrics - OCI
    runtimeOnly("io.micronaut.oraclecloud:micronaut-oraclecloud-micrometer")

    // Metrics - AWS
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-cloudwatch")

    // Tracing
    implementation("io.micronaut:micronaut-tracing")
    implementation("io.opentracing.brave:brave-opentracing")
    runtimeOnly("io.zipkin.brave:brave-instrumentation-http")
    runtimeOnly("io.zipkin.reporter2:zipkin-reporter")

    // DB - Core
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.data:micronaut-data-model")

    // DB - OCI ATP
    implementation platform("com.oracle.database.jdbc:ojdbc-bom:21.1.0.0")
    implementation("io.micronaut.oraclecloud:micronaut-oraclecloud-sdk")
    runtimeOnly("io.micronaut.oraclecloud:micronaut-oraclecloud-atp:2.0.2")
    runtimeOnly("io.micronaut.sql:micronaut-jdbc-hikari")
    runtimeOnly("com.oracle.database.jdbc:ojdbc8")
    runtimeOnly("com.oracle.database.security:oraclepki")
    runtimeOnly("com.oracle.database.security:osdt_cert")
    runtimeOnly("com.oracle.database.security:osdt_core")

    // DB - AWS RDS
    runtimeOnly 'mysql:mysql-connector-java:8.0.25'

    // Nats.io support
    implementation("io.micronaut.nats:micronaut-nats")

    runtimeOnly("ch.qos.logback:logback-classic")

    testImplementation "org.mockito:mockito-core:3.9.0"
    testImplementation 'com.openpojo:openpojo:0.8.12'
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:oracle-xe")
    testImplementation("org.testcontainers:testcontainers")
}

application {
    mainClass.set("mushop.orders.OrderApplication")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

if (javaBaseImage == "graalvm") {
    dockerfile {
        baseImage = "ghcr.io/graalvm/graalvm-ce:ol8-java11-21.1.0"
    }
}

dockerBuild {
    images = ["iad.ocir.io/cloudnative-devrel/micronaut-showcase/mushop/$project.name-${javaBaseImage}:$project.version"]
}

dockerBuildNative {
    images = ["iad.ocir.io/cloudnative-devrel/micronaut-showcase/mushop/${project.name}-native:$project.version"]
}
