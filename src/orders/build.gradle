import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
  id("com.github.johnrengelman.shadow") version "6.1.0"
  id("io.micronaut.application") version "1.4.2"
}

version = "0.1"
group = "micronaut.mushop"

repositories {
  mavenCentral()
  mavenLocal()
}

micronaut {
  runtime("netty")
  testRuntime("junit5")
  processing {
    incremental(true)
    annotations("mushop.orders.*")
  }
}

dependencies {
  annotationProcessor("io.micronaut.data:micronaut-data-processor")
  implementation("javax.annotation:javax.annotation-api")
  implementation("io.micronaut:micronaut-validation")
  implementation("io.micronaut:micronaut-http-client")
  implementation("io.micronaut:micronaut-runtime")

  // service discovery
  implementation("io.micronaut.kubernetes:micronaut-kubernetes-discovery-client")

  // Metrics and tracing
  implementation("io.micronaut:micronaut-management")
  implementation("io.micronaut.micrometer:micronaut-micrometer-core")
  implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
  runtime("io.micronaut.oraclecloud:micronaut-oraclecloud-micrometer:1.2.2-SNAPSHOT")

  implementation("io.micronaut:micronaut-tracing")
  runtime("io.zipkin.reporter2:zipkin-reporter")

  // ATP db access
  implementation platform("com.oracle.database.jdbc:ojdbc-bom:21.1.0.0")
  implementation("io.micronaut.oraclecloud:micronaut-oraclecloud-sdk")
  runtime("io.micronaut.oraclecloud:micronaut-oraclecloud-atp:1.2.2-SNAPSHOT")
  runtimeOnly("io.micronaut.sql:micronaut-jdbc-hikari")
  runtimeOnly("com.oracle.database.jdbc:ojdbc8")
  runtimeOnly("com.oracle.database.security:oraclepki:19.8.0.0")
  runtimeOnly("com.oracle.database.security:osdt_cert:19.8.0.0")
  runtimeOnly("com.oracle.database.security:osdt_core:19.8.0.0")
  implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
  implementation("io.micronaut.data:micronaut-data-model")

  // Nats.io support
  implementation("io.micronaut.nats:micronaut-nats")

  runtimeOnly("ch.qos.logback:logback-classic")

  testImplementation("com.h2database:h2")
  testImplementation "org.mockito:mockito-core:3.+"
  testImplementation 'com.openpojo:openpojo:0.8.12'
}

application {
  mainClass.set("mushop.OrderApplication")
}

java {
  sourceCompatibility = JavaVersion.toVersion("11")
  targetCompatibility = JavaVersion.toVersion("11")
}

dockerBuild {
  images = ["iad.ocir.io/cloudnative-devrel/micronaut-showcase/mushop/$project.name:$project.version"]
}

dockerBuildNative {
  images = ["iad.ocir.io/cloudnative-devrel/micronaut-showcase/mushop/${project.name}-native:$project.version"]
}

tasks.withType(Test) {
  testLogging {
    // set options for log level LIFECYCLE
    events TestLogEvent.FAILED,
        TestLogEvent.PASSED,
        TestLogEvent.SKIPPED
    exceptionFormat TestExceptionFormat.FULL
    showExceptions true
    showCauses true
    showStackTraces true
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}


