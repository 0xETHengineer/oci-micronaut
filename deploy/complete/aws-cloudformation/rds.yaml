AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::SecretsManager-2020-07-23
Description: Deploys an RDS instance
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Basic configuration
        Parameters:
          - DBName
          - DBInstanceClass
          - DBAllocatedStorage
          - CidrIp
    ParameterLabels:
      DBName:
        default: Database name
      DBInstanceClass:
        default: Database instance class
      DBAllocatedStorage:
        default: The size of the database (GiB)
      CidrIp:
        default: CIDR block for the ingress security group
Parameters:
  DBName:
    Default: dbname
    Description: Database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.m5.large
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '50'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB.
  CidrIp:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(0|1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16â€“28
    Default: 10.0.0.0/16
    Description: CIDR block for the ingress security group.
    Type: String
  RandomStringLambdaFunctionArn:
    Type: String
    Description: Random string lambda function arn
Resources:
  # RDS VPC
  RdsVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  # This creates internet gateway for RDS instance network.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  # This attaches the internet gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref RdsVpc
      InternetGatewayId: !Ref InternetGateway

  # This opens the port for ingress traffic from the specified IP cidr.
  EksSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      VpcId: !Ref RdsVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: !Ref CidrIp
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  # Subnet that the rotation Lambda function and the RDS instance will be placed in
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.96.0/19
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref RdsVpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  # Subnet that the rotation Lambda function and the RDS instance will be placed in
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/19
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref RdsVpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  # Route table for VPC
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RdsVpc
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  # Associates route with subnet 1
  RouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref RouteTable

  # Associates route with subnet 2
  RouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref RouteTable

  # Adds route table rule allowing traffic from internet gateway to subnets
  InternetRouteRule:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Database subnet group for the RDS instance
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn: VPCGatewayAttachment
    Properties:
      DBSubnetGroupDescription: "DB Subnet group"
      SubnetIds:
        - Ref: PublicSubnet01
        - Ref: PublicSubnet02
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  # Generate RDS Admin password
  RdsAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 16
      RDSCompatible: true
      Punctuation: false
      ServiceToken: !Ref RandomStringLambdaFunctionArn

  # This is an RDS instance resource. Its master username and password use dynamic references to resolve values from
  # SecretsManager. The dynamic reference guarantees that CloudFormation will not log or persist the resolved value
  # We sub the Secret resource's logical id in order to construct the dynamic reference, since the Secret's name is being #generated by CloudFormation
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: mysql
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      MasterUsername: 'admin'
      MasterUserPassword: !GetAtt RdsAdminPassword.RandomString
      BackupRetentionPeriod: 0
      VPCSecurityGroups:
        - Ref: EksSecurityGroup
      DBName: !Ref DBName
      PubliclyAccessible: true

Outputs:
  RDSPort:
    Value: !GetAtt DBInstance.Endpoint.Port
  RDSAddress:
    Value: !GetAtt DBInstance.Endpoint.Address
  RDSDBName:
    Value: !Ref DBName
  RDSAdminUser:
    Value: 'admin'
  RDSAdminPass:
    Value: !GetAtt RdsAdminPassword.RandomString
