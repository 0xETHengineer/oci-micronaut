name: Build and push Docker images

on:
  push:
    branches:
      - master
    paths:
      # Match any VERSION file under /src folder
      - 'src/**/VERSION'
jobs:
  push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
            fetch-depth: 0
      - name: Log into registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ secrets.DOCKER_REGISTRY_URL }} -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Build and push the images
        run: |
            for versionFilePath in $(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} ${{ github.event.before }} | grep "VERSION");
            do
              # versionFilePath contains the full path to the VERSION file (e.g. src/api/VERSION)
              # we need to strip the "VERSION" from that to get the folder only
              folder=${versionFilePath%"/VERSION"}

              # Get the folder name and prefix it with "mushop"
              # E.g. "mushop-api", "mushop-fulfillment"
              IMAGE_NAME="mushop-$(cut -d "/" -f 2 <<< "$folder")"
              VERSION=$(cat $versionFilePath)

              SEMREG='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z-]*\)'
              SEM=`echo $VERSION | sed -e "s#^v##"`
              TAGS=$SEM
              MAJOR=`echo $SEM | sed -e "s#$SEMREG#\1#"`
              MINOR=`echo $SEM | sed -e "s#$SEMREG#\2#"`
              PATCH=`echo $SEM | sed -e "s#$SEMREG#\3#"`
              SPECIAL=`echo $SEM | sed -e "s#$SEMREG#\4#"`
              # add semantic tags
              if [ "$MAJOR" != "$SEM" ] && [ -z "$SPECIAL" ]; then
                  TAGS="$SEM $MAJOR.$MINOR $MAJOR latest"
                  if [ -n "$SPECIAL" ]; then
                      TAGS="$MAJOR.$MINOR.$PATCH $TAGS"
                  fi
              fi

              tmpImage="image-$RANDOM"
              docker build $folder --file $folder/Dockerfile --tag $tmpImage
              IMAGE_ID=${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_REPOSITORY }}/$IMAGE_NAME

              for tag in $TAGS; do
                echo -e "\nTagging and pushing: ${IMAGE_ID}:${tag}"
                docker tag $tmpImage $IMAGE_ID:$tag
                docker push $IMAGE_ID:$tag
              done
            done;