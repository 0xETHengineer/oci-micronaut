{{- $cloud := .Values.cloud | default (.Values.global.cloud | default (printf "oci")) }}
{{- if eq "oci" $cloud }}

{{- $usesOsb := (index (.Values.global | default .Values) "osb").atp | default .Values.osb.atp -}}
{{- if or $usesOsb .Values.oadbAdminSecret .Values.global.oadbAdminSecret .Values.secrets.oadbAdminPassword  }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "catalogue.fullname" . }}-init-{{ .Release.Revision }}
  labels: {{ include "catalogue.labels" . | nindent 4 }}
spec:
  ttlSecondsAfterFinished: 120
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: {{ include "catalogue.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: Never
      initContainers:
        {{- include "catalogue.init.wallet" . | nindent 8 }}
      containers:
        - name: init
          image: "{{ .Values.dbtools.repository }}:{{ .Values.dbtools.tag }}"
          imagePullPolicy: {{ .Values.dbtools.pullPolicy }}
          command: ["/bin/sh","-c"]
          args:
            - sqlplus ADMIN/\"${ORACLECLOUD_ATP_ADMIN_PASSWORD}\"@${ORACLECLOUD_ATP_WALLET_SERVICE} @service.sql ${ORACLECLOUD_ATP_USERNAME^^} ${ORACLECLOUD_ATP_PASSWORD}
          env:
            {{- include "catalogue.oadb.connection" . | nindent 12 }}
            {{- include "catalogue.oadb.admin" . | nindent 12 }}
          volumeMounts:
            {{- include "catalogue.mount.wallet" . | nindent 12 }}
            {{- include "catalogue.mount.initdb" . | nindent 12 }}
      volumes: {{- include "catalogue.volumes" . | nindent 8 }}
{{- end }}

{{- else }}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "user.fullname" . }}-init-{{ .Release.Revision }}
  labels: {{ include "user.labels" . | nindent 4 }}
spec:
  ttlSecondsAfterFinished: 120
  backoffLimit: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: {{ include "user.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: Never
      containers:
        # create schema
        - name: init
          image: "{{ .Values.dbtools.repository }}:{{ .Values.dbtools.tag }}"
          imagePullPolicy: {{ .Values.dbtools.pullPolicy }}
          command: ["/bin/sh","mysql.init.sh"]
          env:
            - name: AWS_RDS_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: catalogue-rds-init-job-secrets
                  key: adminUsername
            - name: AWS_RDS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: catalogue-rds-init-job-secrets
                  key: adminPassword
            - name: AWS_RDS_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: catalogue-rds-init-job-secrets
                  key: dbHost
            - name: AWS_RDS_PORT
              valueFrom:
                secretKeyRef:
                  name: catalogue-rds-init-job-secrets
                  key: dbPort
            - name: SERVICE_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: catalogue-rds-init-job-secrets
                  key: serviceDbName
            - name: SERVICE_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: catalogue-rds-init-job-secrets
                  key: serviceDbUsername
            - name: SERVICE_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: catalogue-rds-init-job-secrets
                  key: serviceDbPassword
          volumeMounts:
            - name: initdb
              mountPath: /work/
      volumes:
        - name: initdb
          configMap:
            name: {{ include (printf "%s.fullname" .Chart.Name) . }}-init
            items:
              - key: mysql.init.sh
                path: mysql.init.sh
{{- end }}